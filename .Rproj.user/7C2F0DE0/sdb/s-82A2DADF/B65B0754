{
    "collab_server" : "",
    "contents" : "###############\n#LIBS\n###############\nlibrary(lme4)\nlibrary(reshape)\nlibrary(foreign) \nlibrary(ggplot2)\nlibrary(plyr)\nlibrary(data.table)\nlibrary(reshape2)\nlibrary(Hmisc)\nlibrary(mgcv)\nlibrary(gdata)\nlibrary(car)\nlibrary(dplyr)\nlibrary(ggmap)\nlibrary(broom)\nlibrary(splines)\nlibrary(DataCombine)\nsource(\"/media/qnap/Data/code/R_functions/CV_splits.r\") \n\n#load data\n\n# AQUA data\nmod1 <-readRDS(\"/media/qnap/Projects/P028.IL.Israel.MAIAC.PM.V2/work/RDS_files/mod1/mod1.AQ.2003_2015.PM10_Daily/mod1.AQ.2003_2015.PM10_Daily_re.rds\")\nmod1=as.data.table(mod1)\nnrow(mod1)\nplot(mod1$PM10~ mod1$aod_047, xlim=c(0,4))\n\nneveruse <- c(\"EHA\",\"MOD\",\"SAF\")\nmod1 <-mod1[!stn %in% neveruse]\n\n############################# Explore which treshold to use for aod #################\n# res=c()\n# c=c(1,1.25,1.5,1.75,2,2.25,2.5,2.75,3,3.25,3.5,3.75,4)\n# ls=list()\n# \n# for (i in 1:13)\n# {\n#   mod1_s <- filter(mod1,aod_047 < c[i])\n#   \n#   # m1.formula <- as.formula(PM10 ~ aod_047+(1+aod_047|day))  \n#   m1.formula <- as.formula(PM10 ~ aod_047)\n#   \n#   for (j in 1:10)\n#   {\n#     splits_s <- splitdf(mod1_s)\n#     test_s <- splits_s$testset\n#     train_s <- splits_s$trainset\n#     # out_train_s <- lmer(m1.formula,data =  train_s,weights=normwt )\n#     # out_train_s <- lmer(m1.formula,data =  train_s)\n#     out_train_s <- lm(m1.formula,data =  train_s)\n#     test_s$pred.m1.cv <- predict(object=out_train_s ,newdata=test_s,allow.new.levels=TRUE,re.form=NULL )\n#     test_s$iter <- j\n#     ls[[j]]=test_s\n#   }\n#   \n#   #BIND 1 dataset\n#   mod1.cv = do.call(rbind, ls)\n#   \n#   #table updates\n#   r2=summary(lm(PM10~pred.m1.cv,data=mod1.cv))$r.squared\n#   res=c(res,r2)\n#   \n# }\n# \n# results_lmer=data.frame(tr=c,r2=round(res,2))\n# results_lm=data.frame(tr=c,r2=round(res,2))\n\n#############\n\n# Raw cleaned correlation\nmod1<-filter(mod1,PM10 > 0)\n# mod1<-filter(mod1,RelAZ < 90)\nmod1<-filter(mod1,UN < 0.04 & UN > 0)\nmod1<-filter(mod1,aod_047 < 3.5) \n# mod1<-filter(mod1,aod_047 < 1.2) \n\nplot(mod1$PM10~ mod1$aod_047, xlim=c(0,4))\n\n# Compure raw correlation\nm1.formula <- as.formula(PM10 ~ aod_047)\nmod1fit = lm(m1.formula,data=mod1)\nmod1$pred.m1 <- predict(mod1fit)\nprint(summary(lm(PM10~pred.m1,data=mod1))$r.squared)     \n\n## Building cross-validation (cv) dataset\n\nlibrary(foreach)\nlibrary(doMC)\nregisterDoMC(cores=10)\n\ntest_final = foreach(i = 1:10) %dopar% {\n  \n  splits_s <- splitdf(mod1)\n  test_s <- splits_s$testset\n  train_s <- splits_s$trainset\n  # out_train_s <- lmer(m1.formula,data =  train_s,weights=normwt )\n  mod1fit = lm(m1.formula,data=mod1)\n  out_train_s <- lm(m1.formula,data =  train_s)\n  test_s$pred.m1.cv <- predict(object=out_train_s ,newdata=test_s,allow.new.levels=TRUE,re.form=NULL )\n  test_s$iter <- i\n  test_s\n}\n\n#BIND 1 dataset\nmod1.cv = do.call(rbind, test_final)\n\n#table updates\nprint(summary(lm(PM10~pred.m1.cv,data=mod1.cv))$r.squared)\n\n# Use Massimos thresholds to remove PM~ aod with located in oposite quantiles\n\nx<-dplyr::select(mod1,aod_047,stn)\nx$c<-1\nx <- x %>%\n  dplyr::group_by (stn) %>%\n  dplyr::summarise(saod=sum(c))\n\nx=as.data.table(x)\nmod1=as.data.table(mod1)\n\n#merge back count\nsetkey(x,stn)\nsetkey(mod1,stn)\nmod1 <- merge(mod1,x, all.x = T)\n\nmod1$exobs<-0\nmod1<-mod1[aod_047 < quantile(aod_047, c(.50)) & PM10 >  quantile(PM10, c(.90)), exobs := 2]\nmod1<-mod1[aod_047 > quantile(aod_047, c(.90)) & PM10 <  quantile(PM10, c(.50)), exobs := 3]\n\n# mod1<-mod1[saod < 10 , exobs := 5]\n\n#take out bad exobs\nmod1<-filter(mod1,exobs==0)\n\n#based mixed model\nm1.formula <- as.formula(PM10 ~ aod_047\n                         #temporal\n                         +(1+aod_047|day))  \n\n#stage 1\nmod1fit <- lmer(m1.formula,data=mod1)\nsummary(mod1fit)\nmod1$pred.m1 <- predict(mod1fit)\nprint(summary(lm(PM10~pred.m1,data=mod1))$r.squared)\nplot(mod1$PM10~mod1$aod_047)\n\n## Filter outliers - this was not included in the final cleaned file, because it did not improve the model \n## Except for 2004\n\n# Cleaning problematic values for 2004\nmod1$year=year(mod1$day)\nm1.2004=dplyr::filter(mod1,year==\"2004\")\nm1.2004=dplyr::filter(m1.2004,PM10<500)\nm1.2004=dplyr::filter(m1.2004,aod_047<1)\n\nmod1=filter(mod1,year!=2004)\nmod1=rbind(mod1,m1.2004)\n\nplot(mod1$PM10~ mod1$aod_047, xlim=c(0,4))\n\n## Remove observations with missing data\nmod1=mod1[!is.na(mod1$NO2_D.s),]\n\n#take out station with wildly diff PM from surrounding stations (taken from Meytar's code)\nmod1=as.data.table(mod1)\n\n## cleaning mod1 - by meytar -These procesures were not implemented due to low observations left after applying them\n\n#take out station with wildly diff PM from surrounding stations\n\n# take out stn with co located PM10/25 with very high ratios\n#calculate meanPM per grid per day to each station (excluding first station)\nPM25 <- fread(\"/media/qnap/Projects/P028.IL.Israel.MAIAC.PM.V2/work/Meteorological_Data/Daily_Data/Pollution_stn_May16/PM25_D.csv\")\nPM25$date<-paste(PM25$Day,PM25$Month,PM25$Year,sep=\"/\")\nPM25[, day:=as.Date(date, \"%d/%m/%Y\")]\nPM25[, c := as.numeric(format(day, \"%Y\")) ]\nPM25[,c(\"Year\",\"Month\",\"Day\",\"date\"):=NULL]\nPM25 <- PM25[X != 'NaN']\nPM25<-PM25[!is.na(PM25)]\nPM25<-PM25[PM25 > 0.000000000001 & PM25 < 900 ]\n#clear non continous stations\nsetnames(PM25,\"X\",\"x_stn_ITM\")\nsetnames(PM25,\"Y\",\"y_stn_ITM\")\n\n#calculate meanPM per grid per day to each station (excluding first station)\nPM10 <- fread(\"/media/qnap/Projects/P028.IL.Israel.MAIAC.PM.V2/work/Meteorological_Data/Daily_Data/Pollution_stn_May16/PM10_D.csv\")\nPM10$date<-paste(PM10$Day,PM10$Month,PM10$Year,sep=\"/\")\nPM10[, day:=as.Date(date, \"%d/%m/%Y\")]\nPM10[, c := as.numeric(format(day, \"%Y\")) ]\nPM10[,c(\"Year\",\"Month\",\"Day\",\"date\"):=NULL]\nPM10 <- PM10[X != 'NaN']\nPM10<-PM10[!is.na(PM10)]\nPM10<-PM10[PM10 > 0.000000000001 & PM10 <  2000 ]\nsetnames(PM10,\"X\",\"x_stn_ITM\")\nsetnames(PM10,\"Y\",\"y_stn_ITM\")\n\n#clear non continous stations\nsetkey(PM10,stn,day)\nsetkey(PM25,stn,day)\nPM.j=merge(PM10,PM25,by=c(\"stn\",\"day\"))\n#leave only stations with both PM2.5 and PM 10 measurements\nPM.j=na.omit(PM.j)\nPM.j$ratio=PM.j[,PM10]/PM.j[,PM25]\nPM.j[,badstn := paste(stn,day,sep=\"-\")]\n#################BAD STN\nmod1[,badstn := paste(stn,day,sep=\"-\")]\nPM.j<- PM.j[ratio > 0.95]\n####Take out bad stations\nmod1 <- mod1[!(mod1$badstn %in% PM.j$badstn), ] \n\n################# clean BAD STN PM10 and check if improved model?\nmod1$m=month(mod1$day)\n\nraWDaf <- ddply(mod1, c(\"stn\",\"m\"), \n                function(x) {\n                  mod1 <- lm(PM10 ~ aod_047, data=x)\n                  data.frame(R2 = round(summary(mod1)$r.squared, 5), \n                             nsamps = length(summary(mod1)$resid))\n                })\nraWDaf\nraWDaf<-as.data.table(raWDaf)\nbad<- raWDaf[R2 <= 0.1]\nbad[,badid := paste(stn,m,sep=\"-\")]\n\n#################BAD STN\n\nmod1[,badid := paste(stn,m,sep=\"-\")]\n####Take out bad stations\nmod1 <- mod1[!(mod1$badid %in% bad$badid), ] \n\nsaveRDS(mod1,\"/media/qnap/Projects/P028.IL.Israel.MAIAC.PM.V2/work/RDS_files/mod1/mod1.AQ.2003_2015.PM10_Daily/mod1.AQ.2003_2015.PM10_Daily_Re_Clean.rds\")\n\n\n",
    "created" : 1502956578787.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2499752739",
    "id" : "B65B0754",
    "lastKnownWriteTime" : 1502804369,
    "last_content_update" : 1502804369,
    "path" : "N:/Projects/P028.IL.Israel.MAIAC.PM.V2/code/MOD_clean&run/CS03.Clean.AQ.PM10_Alex.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}